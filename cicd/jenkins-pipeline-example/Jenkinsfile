pipeline {
    agent any
    
    triggers {
        githubPush()
    }
    
    environment {
        TEXT_SUCCESS_BUILD = "Build berhasil untuk image: ${IMAGE_NAME}"
        TEXT_FAILURE_BUILD = "Build gagal untuk image: ${IMAGE_NAME}"
        IMAGE_NAME = 'python-api'
        SONAR_HOST_URL = 'http://sonarqube:9000'
        SONAR_TOKEN = credentials('sonarqube-id')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                  branches: [[name: '*/main']], 
                  userRemoteConfigs: [[url: 'https://github.com/rafly28/api-CRUD.git']]
                ])
            }
        }
        
    stage('SonarQube Analysis') {
        environment {
            scannerHome = tool 'sonarqube-tools'
            }
        steps {
                withSonarQubeEnv(credentialsId: 'sonarqube-id', installationName: 'sonarqube-server') {
                    sh """
                    ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=test-sonarqube \
                        -Dsonar.projectName="test-sonarqube" \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.token=$SONAR_TOKEN
                    """
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}")
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh 'docker rmi ${IMAGE_NAME} || true'
            }
        }
        
        success {
            script {
                withCredentials([string(credentialsId: 'telegram_bot_id', variable: 'TOKEN'), string(credentialsId: 'telegram_chat_id', variable: 'CHAT_ID')]) {
                    sh ''' curl -X POST "https://api.telegram.org/bot$TOKEN/sendMessage" -d "chat_id=$CHAT_ID&text=$TEXT_SUCCESS_BUILD" '''
                }
            }
        }
        failure {
            script {
                withCredentials([string(credentialsId: 'telegram_bot_id', variable: 'TOKEN'), string(credentialsId: 'telegram_chat_id', variable: 'CHAT_ID')]) {
                    sh ''' curl -X POST "https://api.telegram.org/bot$TOKEN/sendMessage" -d "chat_id=$CHAT_ID&text=$TEXT_FAILURE_BUILD" '''
                }
            }
        }
    }
}
