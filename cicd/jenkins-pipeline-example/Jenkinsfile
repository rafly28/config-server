pipeline {
    agent any
    
    triggers {
        githubPush()
    }
    
    environment {
        IMAGE_NAME = 'rafly28/python-api'
        SONAR_HOST_URL = 'https://sonarqube.aksescloud.com/'
        SONAR_TOKEN = credentials('jenkins2sonarqube')
        SONAR_TOOL = tool 'sonarqube-tools'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                  branches: [[name: '*/main']], 
                  userRemoteConfigs: [[url: 'https://github.com/rafly28/api-CRUD.git']]
                ])
            }
        }
        
        stage('Get Git Hash') {
            steps {
                script {
                    def gitHashOutput = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    echo "Raw Git Hash Output: ${gitHashOutput}"
                    writeFile file: 'git_hash.txt', text: gitHashOutput
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(credentialsId: 'jenkins2sonarqube', installationName: 'sonarqube-server') {
                    sh """
                    ${SONAR_TOOL}/bin/sonar-scanner \
                        -D sonar.projectKey=python-fastapi \
                        -D sonar.projectName="python-fastapi" \
                        -D sonar.exclusions=**/env/** \
                        -D sonar.python.version=3 \
                        -D sonar.language=python \
                        -D sonar.host.url=${SONAR_HOST_URL} \
                        -D sonar.token=${SONAR_TOKEN}
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def gitHash = readFile('git_hash.txt').trim()
                    docker.build("${IMAGE_NAME}:${gitHash}", ".")
                }
            }
        }

        stage('Delete Docker Image') {
            steps {
                script {
                    def gitHash = readFile('git_hash.txt').trim()
                    sh "docker rmi ${IMAGE_NAME}:${gitHash} || true"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
